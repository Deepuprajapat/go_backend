// Code generated by go-enum DO NOT EDIT.
// Version: 0.6.0
// Revision: 919e61c0174b91303753ee3898569a01abb32c97
// Build Date: 2023-12-18T15:54:43Z
// Built By: goreleaser

package enums

import (
	"database/sql/driver"
	"errors"
	"fmt"
)

const (
	// ProjectStatusUNDERCONSTRUCTION is a ProjectStatus of type UNDER_CONSTRUCTION.
	ProjectStatusUNDERCONSTRUCTION ProjectStatus = "UNDER_CONSTRUCTION"
	// ProjectStatusREADYTOMOVE is a ProjectStatus of type READY_TO_MOVE.
	ProjectStatusREADYTOMOVE ProjectStatus = "READY_TO_MOVE"
	// ProjectStatusNEWLAUNCH is a ProjectStatus of type NEW_LAUNCH.
	ProjectStatusNEWLAUNCH ProjectStatus = "NEW_LAUNCH"
	// ProjectStatusPRELAUNCH is a ProjectStatus of type PRE_LAUNCH.
	ProjectStatusPRELAUNCH ProjectStatus = "PRE_LAUNCH"
)

var ErrInvalidProjectStatus = errors.New("not a valid ProjectStatus")

// String implements the Stringer interface.
func (x ProjectStatus) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x ProjectStatus) IsValid() bool {
	_, err := ParseProjectStatus(string(x))
	return err == nil
}

var _ProjectStatusValue = map[string]ProjectStatus{
	"UNDER_CONSTRUCTION": ProjectStatusUNDERCONSTRUCTION,
	"READY_TO_MOVE":      ProjectStatusREADYTOMOVE,
	"NEW_LAUNCH":         ProjectStatusNEWLAUNCH,
	"PRE_LAUNCH":         ProjectStatusPRELAUNCH,
}

// ParseProjectStatus attempts to convert a string to a ProjectStatus.
func ParseProjectStatus(name string) (ProjectStatus, error) {
	if x, ok := _ProjectStatusValue[name]; ok {
		return x, nil
	}
	return ProjectStatus(""), fmt.Errorf("%s is %w", name, ErrInvalidProjectStatus)
}

// MarshalText implements the text marshaller method.
func (x ProjectStatus) MarshalText() ([]byte, error) {
	return []byte(string(x)), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *ProjectStatus) UnmarshalText(text []byte) error {
	tmp, err := ParseProjectStatus(string(text))
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}

var errProjectStatusNilPtr = errors.New("value pointer is nil") // one per type for package clashes

// Scan implements the Scanner interface.
func (x *ProjectStatus) Scan(value interface{}) (err error) {
	if value == nil {
		*x = ProjectStatus("")
		return
	}

	// A wider range of scannable types.
	// driver.Value values at the top of the list for expediency
	switch v := value.(type) {
	case string:
		*x, err = ParseProjectStatus(v)
	case []byte:
		*x, err = ParseProjectStatus(string(v))
	case ProjectStatus:
		*x = v
	case *ProjectStatus:
		if v == nil {
			return errProjectStatusNilPtr
		}
		*x = *v
	case *string:
		if v == nil {
			return errProjectStatusNilPtr
		}
		*x, err = ParseProjectStatus(*v)
	default:
		return errors.New("invalid type for ProjectStatus")
	}

	return
}

// Value implements the driver Valuer interface.
func (x ProjectStatus) Value() (driver.Value, error) {
	return x.String(), nil
}

// Set implements the Golang flag.Value interface func.
func (x *ProjectStatus) Set(val string) error {
	v, err := ParseProjectStatus(val)
	*x = v
	return err
}

// Get implements the Golang flag.Getter interface func.
func (x *ProjectStatus) Get() interface{} {
	return *x
}

// Type implements the github.com/spf13/pFlag Value interface.
func (x *ProjectStatus) Type() string {
	return "ProjectStatus"
}
