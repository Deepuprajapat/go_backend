// Code generated by go-enum DO NOT EDIT.
// Version: 0.6.0
// Revision: 919e61c0174b91303753ee3898569a01abb32c97
// Build Date: 2023-12-18T15:54:43Z
// Built By: goreleaser

package enums

import (
	"database/sql/driver"
	"errors"
	"fmt"
)

const (
	// PojectConfigurations1BHK is a PojectConfigurations of type 1BHK.
	PojectConfigurations1BHK PojectConfigurations = "1BHK"
	// PojectConfigurations2BHK is a PojectConfigurations of type 2BHK.
	PojectConfigurations2BHK PojectConfigurations = "2BHK"
	// PojectConfigurations3BHK is a PojectConfigurations of type 3BHK.
	PojectConfigurations3BHK PojectConfigurations = "3BHK"
	// PojectConfigurations4BHK is a PojectConfigurations of type 4BHK.
	PojectConfigurations4BHK PojectConfigurations = "4BHK"
	// PojectConfigurations5BHK is a PojectConfigurations of type 5BHK.
	PojectConfigurations5BHK PojectConfigurations = "5BHK"
	// PojectConfigurations6BHK is a PojectConfigurations of type 6BHK.
	PojectConfigurations6BHK PojectConfigurations = "6BHK"
	// PojectConfigurations7BHK is a PojectConfigurations of type 7BHK.
	PojectConfigurations7BHK PojectConfigurations = "7BHK"
	// PojectConfigurations8BHK is a PojectConfigurations of type 8BHK.
	PojectConfigurations8BHK PojectConfigurations = "8BHK"
)

var ErrInvalidPojectConfigurations = errors.New("not a valid PojectConfigurations")

// String implements the Stringer interface.
func (x PojectConfigurations) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x PojectConfigurations) IsValid() bool {
	_, err := ParsePojectConfigurations(string(x))
	return err == nil
}

var _PojectConfigurationsValue = map[string]PojectConfigurations{
	"1BHK": PojectConfigurations1BHK,
	"2BHK": PojectConfigurations2BHK,
	"3BHK": PojectConfigurations3BHK,
	"4BHK": PojectConfigurations4BHK,
	"5BHK": PojectConfigurations5BHK,
	"6BHK": PojectConfigurations6BHK,
	"7BHK": PojectConfigurations7BHK,
	"8BHK": PojectConfigurations8BHK,
}

// ParsePojectConfigurations attempts to convert a string to a PojectConfigurations.
func ParsePojectConfigurations(name string) (PojectConfigurations, error) {
	if x, ok := _PojectConfigurationsValue[name]; ok {
		return x, nil
	}
	return PojectConfigurations(""), fmt.Errorf("%s is %w", name, ErrInvalidPojectConfigurations)
}

// MarshalText implements the text marshaller method.
func (x PojectConfigurations) MarshalText() ([]byte, error) {
	return []byte(string(x)), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *PojectConfigurations) UnmarshalText(text []byte) error {
	tmp, err := ParsePojectConfigurations(string(text))
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}

var errPojectConfigurationsNilPtr = errors.New("value pointer is nil") // one per type for package clashes

// Scan implements the Scanner interface.
func (x *PojectConfigurations) Scan(value interface{}) (err error) {
	if value == nil {
		*x = PojectConfigurations("")
		return
	}

	// A wider range of scannable types.
	// driver.Value values at the top of the list for expediency
	switch v := value.(type) {
	case string:
		*x, err = ParsePojectConfigurations(v)
	case []byte:
		*x, err = ParsePojectConfigurations(string(v))
	case PojectConfigurations:
		*x = v
	case *PojectConfigurations:
		if v == nil {
			return errPojectConfigurationsNilPtr
		}
		*x = *v
	case *string:
		if v == nil {
			return errPojectConfigurationsNilPtr
		}
		*x, err = ParsePojectConfigurations(*v)
	default:
		return errors.New("invalid type for PojectConfigurations")
	}

	return
}

// Value implements the driver Valuer interface.
func (x PojectConfigurations) Value() (driver.Value, error) {
	return x.String(), nil
}

// Set implements the Golang flag.Value interface func.
func (x *PojectConfigurations) Set(val string) error {
	v, err := ParsePojectConfigurations(val)
	*x = v
	return err
}

// Get implements the Golang flag.Getter interface func.
func (x *PojectConfigurations) Get() interface{} {
	return *x
}

// Type implements the github.com/spf13/pFlag Value interface.
func (x *PojectConfigurations) Type() string {
	return "PojectConfigurations"
}
