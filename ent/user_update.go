// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/VI-IM/im_backend_go/ent/blogs"
	"github.com/VI-IM/im_backend_go/ent/predicate"
	"github.com/VI-IM/im_backend_go/ent/user"
)

// UserUpdate is the builder for updating User entities.
type UserUpdate struct {
	config
	hooks    []Hook
	mutation *UserMutation
}

// Where appends a list predicates to the UserUpdate builder.
func (uu *UserUpdate) Where(ps ...predicate.User) *UserUpdate {
	uu.mutation.Where(ps...)
	return uu
}

// SetUsername sets the "username" field.
func (uu *UserUpdate) SetUsername(s string) *UserUpdate {
	uu.mutation.SetUsername(s)
	return uu
}

// SetNillableUsername sets the "username" field if the given value is not nil.
func (uu *UserUpdate) SetNillableUsername(s *string) *UserUpdate {
	if s != nil {
		uu.SetUsername(*s)
	}
	return uu
}

// SetPassword sets the "password" field.
func (uu *UserUpdate) SetPassword(s string) *UserUpdate {
	uu.mutation.SetPassword(s)
	return uu
}

// SetNillablePassword sets the "password" field if the given value is not nil.
func (uu *UserUpdate) SetNillablePassword(s *string) *UserUpdate {
	if s != nil {
		uu.SetPassword(*s)
	}
	return uu
}

// SetEmail sets the "email" field.
func (uu *UserUpdate) SetEmail(s string) *UserUpdate {
	uu.mutation.SetEmail(s)
	return uu
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (uu *UserUpdate) SetNillableEmail(s *string) *UserUpdate {
	if s != nil {
		uu.SetEmail(*s)
	}
	return uu
}

// SetFirstName sets the "first_name" field.
func (uu *UserUpdate) SetFirstName(s string) *UserUpdate {
	uu.mutation.SetFirstName(s)
	return uu
}

// SetNillableFirstName sets the "first_name" field if the given value is not nil.
func (uu *UserUpdate) SetNillableFirstName(s *string) *UserUpdate {
	if s != nil {
		uu.SetFirstName(*s)
	}
	return uu
}

// SetLastName sets the "last_name" field.
func (uu *UserUpdate) SetLastName(s string) *UserUpdate {
	uu.mutation.SetLastName(s)
	return uu
}

// SetNillableLastName sets the "last_name" field if the given value is not nil.
func (uu *UserUpdate) SetNillableLastName(s *string) *UserUpdate {
	if s != nil {
		uu.SetLastName(*s)
	}
	return uu
}

// SetDateOfBirth sets the "date_of_birth" field.
func (uu *UserUpdate) SetDateOfBirth(t time.Time) *UserUpdate {
	uu.mutation.SetDateOfBirth(t)
	return uu
}

// SetNillableDateOfBirth sets the "date_of_birth" field if the given value is not nil.
func (uu *UserUpdate) SetNillableDateOfBirth(t *time.Time) *UserUpdate {
	if t != nil {
		uu.SetDateOfBirth(*t)
	}
	return uu
}

// ClearDateOfBirth clears the value of the "date_of_birth" field.
func (uu *UserUpdate) ClearDateOfBirth() *UserUpdate {
	uu.mutation.ClearDateOfBirth()
	return uu
}

// SetGender sets the "gender" field.
func (uu *UserUpdate) SetGender(s string) *UserUpdate {
	uu.mutation.SetGender(s)
	return uu
}

// SetNillableGender sets the "gender" field if the given value is not nil.
func (uu *UserUpdate) SetNillableGender(s *string) *UserUpdate {
	if s != nil {
		uu.SetGender(*s)
	}
	return uu
}

// ClearGender clears the value of the "gender" field.
func (uu *UserUpdate) ClearGender() *UserUpdate {
	uu.mutation.ClearGender()
	return uu
}

// SetPhoneNumber sets the "phone_number" field.
func (uu *UserUpdate) SetPhoneNumber(s string) *UserUpdate {
	uu.mutation.SetPhoneNumber(s)
	return uu
}

// SetNillablePhoneNumber sets the "phone_number" field if the given value is not nil.
func (uu *UserUpdate) SetNillablePhoneNumber(s *string) *UserUpdate {
	if s != nil {
		uu.SetPhoneNumber(*s)
	}
	return uu
}

// ClearPhoneNumber clears the value of the "phone_number" field.
func (uu *UserUpdate) ClearPhoneNumber() *UserUpdate {
	uu.mutation.ClearPhoneNumber()
	return uu
}

// SetCurrentAddress sets the "current_address" field.
func (uu *UserUpdate) SetCurrentAddress(s string) *UserUpdate {
	uu.mutation.SetCurrentAddress(s)
	return uu
}

// SetNillableCurrentAddress sets the "current_address" field if the given value is not nil.
func (uu *UserUpdate) SetNillableCurrentAddress(s *string) *UserUpdate {
	if s != nil {
		uu.SetCurrentAddress(*s)
	}
	return uu
}

// ClearCurrentAddress clears the value of the "current_address" field.
func (uu *UserUpdate) ClearCurrentAddress() *UserUpdate {
	uu.mutation.ClearCurrentAddress()
	return uu
}

// SetPermanentAddress sets the "permanent_address" field.
func (uu *UserUpdate) SetPermanentAddress(s string) *UserUpdate {
	uu.mutation.SetPermanentAddress(s)
	return uu
}

// SetNillablePermanentAddress sets the "permanent_address" field if the given value is not nil.
func (uu *UserUpdate) SetNillablePermanentAddress(s *string) *UserUpdate {
	if s != nil {
		uu.SetPermanentAddress(*s)
	}
	return uu
}

// ClearPermanentAddress clears the value of the "permanent_address" field.
func (uu *UserUpdate) ClearPermanentAddress() *UserUpdate {
	uu.mutation.ClearPermanentAddress()
	return uu
}

// SetIsActive sets the "is_active" field.
func (uu *UserUpdate) SetIsActive(b bool) *UserUpdate {
	uu.mutation.SetIsActive(b)
	return uu
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (uu *UserUpdate) SetNillableIsActive(b *bool) *UserUpdate {
	if b != nil {
		uu.SetIsActive(*b)
	}
	return uu
}

// SetIsDeleted sets the "is_deleted" field.
func (uu *UserUpdate) SetIsDeleted(b bool) *UserUpdate {
	uu.mutation.SetIsDeleted(b)
	return uu
}

// SetNillableIsDeleted sets the "is_deleted" field if the given value is not nil.
func (uu *UserUpdate) SetNillableIsDeleted(b *bool) *UserUpdate {
	if b != nil {
		uu.SetIsDeleted(*b)
	}
	return uu
}

// SetIsEmailVerified sets the "is_email_verified" field.
func (uu *UserUpdate) SetIsEmailVerified(b bool) *UserUpdate {
	uu.mutation.SetIsEmailVerified(b)
	return uu
}

// SetNillableIsEmailVerified sets the "is_email_verified" field if the given value is not nil.
func (uu *UserUpdate) SetNillableIsEmailVerified(b *bool) *UserUpdate {
	if b != nil {
		uu.SetIsEmailVerified(*b)
	}
	return uu
}

// SetIsVerified sets the "is_verified" field.
func (uu *UserUpdate) SetIsVerified(b bool) *UserUpdate {
	uu.mutation.SetIsVerified(b)
	return uu
}

// SetNillableIsVerified sets the "is_verified" field if the given value is not nil.
func (uu *UserUpdate) SetNillableIsVerified(b *bool) *UserUpdate {
	if b != nil {
		uu.SetIsVerified(*b)
	}
	return uu
}

// SetLastLoginTime sets the "last_login_time" field.
func (uu *UserUpdate) SetLastLoginTime(t time.Time) *UserUpdate {
	uu.mutation.SetLastLoginTime(t)
	return uu
}

// SetNillableLastLoginTime sets the "last_login_time" field if the given value is not nil.
func (uu *UserUpdate) SetNillableLastLoginTime(t *time.Time) *UserUpdate {
	if t != nil {
		uu.SetLastLoginTime(*t)
	}
	return uu
}

// ClearLastLoginTime clears the value of the "last_login_time" field.
func (uu *UserUpdate) ClearLastLoginTime() *UserUpdate {
	uu.mutation.ClearLastLoginTime()
	return uu
}

// SetParentID sets the "parent_id" field.
func (uu *UserUpdate) SetParentID(i int) *UserUpdate {
	uu.mutation.ResetParentID()
	uu.mutation.SetParentID(i)
	return uu
}

// SetNillableParentID sets the "parent_id" field if the given value is not nil.
func (uu *UserUpdate) SetNillableParentID(i *int) *UserUpdate {
	if i != nil {
		uu.SetParentID(*i)
	}
	return uu
}

// AddParentID adds i to the "parent_id" field.
func (uu *UserUpdate) AddParentID(i int) *UserUpdate {
	uu.mutation.AddParentID(i)
	return uu
}

// ClearParentID clears the value of the "parent_id" field.
func (uu *UserUpdate) ClearParentID() *UserUpdate {
	uu.mutation.ClearParentID()
	return uu
}

// SetPhotoURL sets the "photo_url" field.
func (uu *UserUpdate) SetPhotoURL(s string) *UserUpdate {
	uu.mutation.SetPhotoURL(s)
	return uu
}

// SetNillablePhotoURL sets the "photo_url" field if the given value is not nil.
func (uu *UserUpdate) SetNillablePhotoURL(s *string) *UserUpdate {
	if s != nil {
		uu.SetPhotoURL(*s)
	}
	return uu
}

// ClearPhotoURL clears the value of the "photo_url" field.
func (uu *UserUpdate) ClearPhotoURL() *UserUpdate {
	uu.mutation.ClearPhotoURL()
	return uu
}

// SetCreatedAt sets the "created_at" field.
func (uu *UserUpdate) SetCreatedAt(t time.Time) *UserUpdate {
	uu.mutation.SetCreatedAt(t)
	return uu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (uu *UserUpdate) SetNillableCreatedAt(t *time.Time) *UserUpdate {
	if t != nil {
		uu.SetCreatedAt(*t)
	}
	return uu
}

// SetUpdatedAt sets the "updated_at" field.
func (uu *UserUpdate) SetUpdatedAt(t time.Time) *UserUpdate {
	uu.mutation.SetUpdatedAt(t)
	return uu
}

// SetCreatedBy sets the "created_by" field.
func (uu *UserUpdate) SetCreatedBy(i int) *UserUpdate {
	uu.mutation.ResetCreatedBy()
	uu.mutation.SetCreatedBy(i)
	return uu
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (uu *UserUpdate) SetNillableCreatedBy(i *int) *UserUpdate {
	if i != nil {
		uu.SetCreatedBy(*i)
	}
	return uu
}

// AddCreatedBy adds i to the "created_by" field.
func (uu *UserUpdate) AddCreatedBy(i int) *UserUpdate {
	uu.mutation.AddCreatedBy(i)
	return uu
}

// ClearCreatedBy clears the value of the "created_by" field.
func (uu *UserUpdate) ClearCreatedBy() *UserUpdate {
	uu.mutation.ClearCreatedBy()
	return uu
}

// SetUpdatedBy sets the "updated_by" field.
func (uu *UserUpdate) SetUpdatedBy(i int) *UserUpdate {
	uu.mutation.ResetUpdatedBy()
	uu.mutation.SetUpdatedBy(i)
	return uu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (uu *UserUpdate) SetNillableUpdatedBy(i *int) *UserUpdate {
	if i != nil {
		uu.SetUpdatedBy(*i)
	}
	return uu
}

// AddUpdatedBy adds i to the "updated_by" field.
func (uu *UserUpdate) AddUpdatedBy(i int) *UserUpdate {
	uu.mutation.AddUpdatedBy(i)
	return uu
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (uu *UserUpdate) ClearUpdatedBy() *UserUpdate {
	uu.mutation.ClearUpdatedBy()
	return uu
}

// AddUpdatedBlogIDs adds the "updated_blogs" edge to the Blogs entity by IDs.
func (uu *UserUpdate) AddUpdatedBlogIDs(ids ...int) *UserUpdate {
	uu.mutation.AddUpdatedBlogIDs(ids...)
	return uu
}

// AddUpdatedBlogs adds the "updated_blogs" edges to the Blogs entity.
func (uu *UserUpdate) AddUpdatedBlogs(b ...*Blogs) *UserUpdate {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return uu.AddUpdatedBlogIDs(ids...)
}

// SetCreatedByUserID sets the "created_by_user" edge to the User entity by ID.
func (uu *UserUpdate) SetCreatedByUserID(id int) *UserUpdate {
	uu.mutation.SetCreatedByUserID(id)
	return uu
}

// SetNillableCreatedByUserID sets the "created_by_user" edge to the User entity by ID if the given value is not nil.
func (uu *UserUpdate) SetNillableCreatedByUserID(id *int) *UserUpdate {
	if id != nil {
		uu = uu.SetCreatedByUserID(*id)
	}
	return uu
}

// SetCreatedByUser sets the "created_by_user" edge to the User entity.
func (uu *UserUpdate) SetCreatedByUser(u *User) *UserUpdate {
	return uu.SetCreatedByUserID(u.ID)
}

// AddCreatedUserIDs adds the "created_users" edge to the User entity by IDs.
func (uu *UserUpdate) AddCreatedUserIDs(ids ...int) *UserUpdate {
	uu.mutation.AddCreatedUserIDs(ids...)
	return uu
}

// AddCreatedUsers adds the "created_users" edges to the User entity.
func (uu *UserUpdate) AddCreatedUsers(u ...*User) *UserUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uu.AddCreatedUserIDs(ids...)
}

// SetUpdatedByUserID sets the "updated_by_user" edge to the User entity by ID.
func (uu *UserUpdate) SetUpdatedByUserID(id int) *UserUpdate {
	uu.mutation.SetUpdatedByUserID(id)
	return uu
}

// SetNillableUpdatedByUserID sets the "updated_by_user" edge to the User entity by ID if the given value is not nil.
func (uu *UserUpdate) SetNillableUpdatedByUserID(id *int) *UserUpdate {
	if id != nil {
		uu = uu.SetUpdatedByUserID(*id)
	}
	return uu
}

// SetUpdatedByUser sets the "updated_by_user" edge to the User entity.
func (uu *UserUpdate) SetUpdatedByUser(u *User) *UserUpdate {
	return uu.SetUpdatedByUserID(u.ID)
}

// AddUpdatedUserIDs adds the "updated_users" edge to the User entity by IDs.
func (uu *UserUpdate) AddUpdatedUserIDs(ids ...int) *UserUpdate {
	uu.mutation.AddUpdatedUserIDs(ids...)
	return uu
}

// AddUpdatedUsers adds the "updated_users" edges to the User entity.
func (uu *UserUpdate) AddUpdatedUsers(u ...*User) *UserUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uu.AddUpdatedUserIDs(ids...)
}

// Mutation returns the UserMutation object of the builder.
func (uu *UserUpdate) Mutation() *UserMutation {
	return uu.mutation
}

// ClearUpdatedBlogs clears all "updated_blogs" edges to the Blogs entity.
func (uu *UserUpdate) ClearUpdatedBlogs() *UserUpdate {
	uu.mutation.ClearUpdatedBlogs()
	return uu
}

// RemoveUpdatedBlogIDs removes the "updated_blogs" edge to Blogs entities by IDs.
func (uu *UserUpdate) RemoveUpdatedBlogIDs(ids ...int) *UserUpdate {
	uu.mutation.RemoveUpdatedBlogIDs(ids...)
	return uu
}

// RemoveUpdatedBlogs removes "updated_blogs" edges to Blogs entities.
func (uu *UserUpdate) RemoveUpdatedBlogs(b ...*Blogs) *UserUpdate {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return uu.RemoveUpdatedBlogIDs(ids...)
}

// ClearCreatedByUser clears the "created_by_user" edge to the User entity.
func (uu *UserUpdate) ClearCreatedByUser() *UserUpdate {
	uu.mutation.ClearCreatedByUser()
	return uu
}

// ClearCreatedUsers clears all "created_users" edges to the User entity.
func (uu *UserUpdate) ClearCreatedUsers() *UserUpdate {
	uu.mutation.ClearCreatedUsers()
	return uu
}

// RemoveCreatedUserIDs removes the "created_users" edge to User entities by IDs.
func (uu *UserUpdate) RemoveCreatedUserIDs(ids ...int) *UserUpdate {
	uu.mutation.RemoveCreatedUserIDs(ids...)
	return uu
}

// RemoveCreatedUsers removes "created_users" edges to User entities.
func (uu *UserUpdate) RemoveCreatedUsers(u ...*User) *UserUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uu.RemoveCreatedUserIDs(ids...)
}

// ClearUpdatedByUser clears the "updated_by_user" edge to the User entity.
func (uu *UserUpdate) ClearUpdatedByUser() *UserUpdate {
	uu.mutation.ClearUpdatedByUser()
	return uu
}

// ClearUpdatedUsers clears all "updated_users" edges to the User entity.
func (uu *UserUpdate) ClearUpdatedUsers() *UserUpdate {
	uu.mutation.ClearUpdatedUsers()
	return uu
}

// RemoveUpdatedUserIDs removes the "updated_users" edge to User entities by IDs.
func (uu *UserUpdate) RemoveUpdatedUserIDs(ids ...int) *UserUpdate {
	uu.mutation.RemoveUpdatedUserIDs(ids...)
	return uu
}

// RemoveUpdatedUsers removes "updated_users" edges to User entities.
func (uu *UserUpdate) RemoveUpdatedUsers(u ...*User) *UserUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uu.RemoveUpdatedUserIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (uu *UserUpdate) Save(ctx context.Context) (int, error) {
	uu.defaults()
	return withHooks(ctx, uu.sqlSave, uu.mutation, uu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uu *UserUpdate) SaveX(ctx context.Context) int {
	affected, err := uu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (uu *UserUpdate) Exec(ctx context.Context) error {
	_, err := uu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uu *UserUpdate) ExecX(ctx context.Context) {
	if err := uu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uu *UserUpdate) defaults() {
	if _, ok := uu.mutation.UpdatedAt(); !ok {
		v := user.UpdateDefaultUpdatedAt()
		uu.mutation.SetUpdatedAt(v)
	}
}

func (uu *UserUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(user.Table, user.Columns, sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt))
	if ps := uu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uu.mutation.Username(); ok {
		_spec.SetField(user.FieldUsername, field.TypeString, value)
	}
	if value, ok := uu.mutation.Password(); ok {
		_spec.SetField(user.FieldPassword, field.TypeString, value)
	}
	if value, ok := uu.mutation.Email(); ok {
		_spec.SetField(user.FieldEmail, field.TypeString, value)
	}
	if value, ok := uu.mutation.FirstName(); ok {
		_spec.SetField(user.FieldFirstName, field.TypeString, value)
	}
	if value, ok := uu.mutation.LastName(); ok {
		_spec.SetField(user.FieldLastName, field.TypeString, value)
	}
	if value, ok := uu.mutation.DateOfBirth(); ok {
		_spec.SetField(user.FieldDateOfBirth, field.TypeTime, value)
	}
	if uu.mutation.DateOfBirthCleared() {
		_spec.ClearField(user.FieldDateOfBirth, field.TypeTime)
	}
	if value, ok := uu.mutation.Gender(); ok {
		_spec.SetField(user.FieldGender, field.TypeString, value)
	}
	if uu.mutation.GenderCleared() {
		_spec.ClearField(user.FieldGender, field.TypeString)
	}
	if value, ok := uu.mutation.PhoneNumber(); ok {
		_spec.SetField(user.FieldPhoneNumber, field.TypeString, value)
	}
	if uu.mutation.PhoneNumberCleared() {
		_spec.ClearField(user.FieldPhoneNumber, field.TypeString)
	}
	if value, ok := uu.mutation.CurrentAddress(); ok {
		_spec.SetField(user.FieldCurrentAddress, field.TypeString, value)
	}
	if uu.mutation.CurrentAddressCleared() {
		_spec.ClearField(user.FieldCurrentAddress, field.TypeString)
	}
	if value, ok := uu.mutation.PermanentAddress(); ok {
		_spec.SetField(user.FieldPermanentAddress, field.TypeString, value)
	}
	if uu.mutation.PermanentAddressCleared() {
		_spec.ClearField(user.FieldPermanentAddress, field.TypeString)
	}
	if value, ok := uu.mutation.IsActive(); ok {
		_spec.SetField(user.FieldIsActive, field.TypeBool, value)
	}
	if value, ok := uu.mutation.IsDeleted(); ok {
		_spec.SetField(user.FieldIsDeleted, field.TypeBool, value)
	}
	if value, ok := uu.mutation.IsEmailVerified(); ok {
		_spec.SetField(user.FieldIsEmailVerified, field.TypeBool, value)
	}
	if value, ok := uu.mutation.IsVerified(); ok {
		_spec.SetField(user.FieldIsVerified, field.TypeBool, value)
	}
	if value, ok := uu.mutation.LastLoginTime(); ok {
		_spec.SetField(user.FieldLastLoginTime, field.TypeTime, value)
	}
	if uu.mutation.LastLoginTimeCleared() {
		_spec.ClearField(user.FieldLastLoginTime, field.TypeTime)
	}
	if value, ok := uu.mutation.ParentID(); ok {
		_spec.SetField(user.FieldParentID, field.TypeInt, value)
	}
	if value, ok := uu.mutation.AddedParentID(); ok {
		_spec.AddField(user.FieldParentID, field.TypeInt, value)
	}
	if uu.mutation.ParentIDCleared() {
		_spec.ClearField(user.FieldParentID, field.TypeInt)
	}
	if value, ok := uu.mutation.PhotoURL(); ok {
		_spec.SetField(user.FieldPhotoURL, field.TypeString, value)
	}
	if uu.mutation.PhotoURLCleared() {
		_spec.ClearField(user.FieldPhotoURL, field.TypeString)
	}
	if value, ok := uu.mutation.CreatedAt(); ok {
		_spec.SetField(user.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := uu.mutation.UpdatedAt(); ok {
		_spec.SetField(user.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := uu.mutation.CreatedBy(); ok {
		_spec.SetField(user.FieldCreatedBy, field.TypeInt, value)
	}
	if value, ok := uu.mutation.AddedCreatedBy(); ok {
		_spec.AddField(user.FieldCreatedBy, field.TypeInt, value)
	}
	if uu.mutation.CreatedByCleared() {
		_spec.ClearField(user.FieldCreatedBy, field.TypeInt)
	}
	if value, ok := uu.mutation.UpdatedBy(); ok {
		_spec.SetField(user.FieldUpdatedBy, field.TypeInt, value)
	}
	if value, ok := uu.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(user.FieldUpdatedBy, field.TypeInt, value)
	}
	if uu.mutation.UpdatedByCleared() {
		_spec.ClearField(user.FieldUpdatedBy, field.TypeInt)
	}
	if uu.mutation.UpdatedBlogsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UpdatedBlogsTable,
			Columns: []string{user.UpdatedBlogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blogs.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedUpdatedBlogsIDs(); len(nodes) > 0 && !uu.mutation.UpdatedBlogsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UpdatedBlogsTable,
			Columns: []string{user.UpdatedBlogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blogs.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.UpdatedBlogsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UpdatedBlogsTable,
			Columns: []string{user.UpdatedBlogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blogs.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.CreatedByUserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   user.CreatedByUserTable,
			Columns: []string{user.CreatedByUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.CreatedByUserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   user.CreatedByUserTable,
			Columns: []string{user.CreatedByUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.CreatedUsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CreatedUsersTable,
			Columns: []string{user.CreatedUsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedCreatedUsersIDs(); len(nodes) > 0 && !uu.mutation.CreatedUsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CreatedUsersTable,
			Columns: []string{user.CreatedUsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.CreatedUsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CreatedUsersTable,
			Columns: []string{user.CreatedUsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.UpdatedByUserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   user.UpdatedByUserTable,
			Columns: []string{user.UpdatedByUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.UpdatedByUserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   user.UpdatedByUserTable,
			Columns: []string{user.UpdatedByUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.UpdatedUsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UpdatedUsersTable,
			Columns: []string{user.UpdatedUsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedUpdatedUsersIDs(); len(nodes) > 0 && !uu.mutation.UpdatedUsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UpdatedUsersTable,
			Columns: []string{user.UpdatedUsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.UpdatedUsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UpdatedUsersTable,
			Columns: []string{user.UpdatedUsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, uu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	uu.mutation.done = true
	return n, nil
}

// UserUpdateOne is the builder for updating a single User entity.
type UserUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserMutation
}

// SetUsername sets the "username" field.
func (uuo *UserUpdateOne) SetUsername(s string) *UserUpdateOne {
	uuo.mutation.SetUsername(s)
	return uuo
}

// SetNillableUsername sets the "username" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableUsername(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetUsername(*s)
	}
	return uuo
}

// SetPassword sets the "password" field.
func (uuo *UserUpdateOne) SetPassword(s string) *UserUpdateOne {
	uuo.mutation.SetPassword(s)
	return uuo
}

// SetNillablePassword sets the "password" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillablePassword(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetPassword(*s)
	}
	return uuo
}

// SetEmail sets the "email" field.
func (uuo *UserUpdateOne) SetEmail(s string) *UserUpdateOne {
	uuo.mutation.SetEmail(s)
	return uuo
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableEmail(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetEmail(*s)
	}
	return uuo
}

// SetFirstName sets the "first_name" field.
func (uuo *UserUpdateOne) SetFirstName(s string) *UserUpdateOne {
	uuo.mutation.SetFirstName(s)
	return uuo
}

// SetNillableFirstName sets the "first_name" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableFirstName(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetFirstName(*s)
	}
	return uuo
}

// SetLastName sets the "last_name" field.
func (uuo *UserUpdateOne) SetLastName(s string) *UserUpdateOne {
	uuo.mutation.SetLastName(s)
	return uuo
}

// SetNillableLastName sets the "last_name" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableLastName(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetLastName(*s)
	}
	return uuo
}

// SetDateOfBirth sets the "date_of_birth" field.
func (uuo *UserUpdateOne) SetDateOfBirth(t time.Time) *UserUpdateOne {
	uuo.mutation.SetDateOfBirth(t)
	return uuo
}

// SetNillableDateOfBirth sets the "date_of_birth" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableDateOfBirth(t *time.Time) *UserUpdateOne {
	if t != nil {
		uuo.SetDateOfBirth(*t)
	}
	return uuo
}

// ClearDateOfBirth clears the value of the "date_of_birth" field.
func (uuo *UserUpdateOne) ClearDateOfBirth() *UserUpdateOne {
	uuo.mutation.ClearDateOfBirth()
	return uuo
}

// SetGender sets the "gender" field.
func (uuo *UserUpdateOne) SetGender(s string) *UserUpdateOne {
	uuo.mutation.SetGender(s)
	return uuo
}

// SetNillableGender sets the "gender" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableGender(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetGender(*s)
	}
	return uuo
}

// ClearGender clears the value of the "gender" field.
func (uuo *UserUpdateOne) ClearGender() *UserUpdateOne {
	uuo.mutation.ClearGender()
	return uuo
}

// SetPhoneNumber sets the "phone_number" field.
func (uuo *UserUpdateOne) SetPhoneNumber(s string) *UserUpdateOne {
	uuo.mutation.SetPhoneNumber(s)
	return uuo
}

// SetNillablePhoneNumber sets the "phone_number" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillablePhoneNumber(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetPhoneNumber(*s)
	}
	return uuo
}

// ClearPhoneNumber clears the value of the "phone_number" field.
func (uuo *UserUpdateOne) ClearPhoneNumber() *UserUpdateOne {
	uuo.mutation.ClearPhoneNumber()
	return uuo
}

// SetCurrentAddress sets the "current_address" field.
func (uuo *UserUpdateOne) SetCurrentAddress(s string) *UserUpdateOne {
	uuo.mutation.SetCurrentAddress(s)
	return uuo
}

// SetNillableCurrentAddress sets the "current_address" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableCurrentAddress(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetCurrentAddress(*s)
	}
	return uuo
}

// ClearCurrentAddress clears the value of the "current_address" field.
func (uuo *UserUpdateOne) ClearCurrentAddress() *UserUpdateOne {
	uuo.mutation.ClearCurrentAddress()
	return uuo
}

// SetPermanentAddress sets the "permanent_address" field.
func (uuo *UserUpdateOne) SetPermanentAddress(s string) *UserUpdateOne {
	uuo.mutation.SetPermanentAddress(s)
	return uuo
}

// SetNillablePermanentAddress sets the "permanent_address" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillablePermanentAddress(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetPermanentAddress(*s)
	}
	return uuo
}

// ClearPermanentAddress clears the value of the "permanent_address" field.
func (uuo *UserUpdateOne) ClearPermanentAddress() *UserUpdateOne {
	uuo.mutation.ClearPermanentAddress()
	return uuo
}

// SetIsActive sets the "is_active" field.
func (uuo *UserUpdateOne) SetIsActive(b bool) *UserUpdateOne {
	uuo.mutation.SetIsActive(b)
	return uuo
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableIsActive(b *bool) *UserUpdateOne {
	if b != nil {
		uuo.SetIsActive(*b)
	}
	return uuo
}

// SetIsDeleted sets the "is_deleted" field.
func (uuo *UserUpdateOne) SetIsDeleted(b bool) *UserUpdateOne {
	uuo.mutation.SetIsDeleted(b)
	return uuo
}

// SetNillableIsDeleted sets the "is_deleted" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableIsDeleted(b *bool) *UserUpdateOne {
	if b != nil {
		uuo.SetIsDeleted(*b)
	}
	return uuo
}

// SetIsEmailVerified sets the "is_email_verified" field.
func (uuo *UserUpdateOne) SetIsEmailVerified(b bool) *UserUpdateOne {
	uuo.mutation.SetIsEmailVerified(b)
	return uuo
}

// SetNillableIsEmailVerified sets the "is_email_verified" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableIsEmailVerified(b *bool) *UserUpdateOne {
	if b != nil {
		uuo.SetIsEmailVerified(*b)
	}
	return uuo
}

// SetIsVerified sets the "is_verified" field.
func (uuo *UserUpdateOne) SetIsVerified(b bool) *UserUpdateOne {
	uuo.mutation.SetIsVerified(b)
	return uuo
}

// SetNillableIsVerified sets the "is_verified" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableIsVerified(b *bool) *UserUpdateOne {
	if b != nil {
		uuo.SetIsVerified(*b)
	}
	return uuo
}

// SetLastLoginTime sets the "last_login_time" field.
func (uuo *UserUpdateOne) SetLastLoginTime(t time.Time) *UserUpdateOne {
	uuo.mutation.SetLastLoginTime(t)
	return uuo
}

// SetNillableLastLoginTime sets the "last_login_time" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableLastLoginTime(t *time.Time) *UserUpdateOne {
	if t != nil {
		uuo.SetLastLoginTime(*t)
	}
	return uuo
}

// ClearLastLoginTime clears the value of the "last_login_time" field.
func (uuo *UserUpdateOne) ClearLastLoginTime() *UserUpdateOne {
	uuo.mutation.ClearLastLoginTime()
	return uuo
}

// SetParentID sets the "parent_id" field.
func (uuo *UserUpdateOne) SetParentID(i int) *UserUpdateOne {
	uuo.mutation.ResetParentID()
	uuo.mutation.SetParentID(i)
	return uuo
}

// SetNillableParentID sets the "parent_id" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableParentID(i *int) *UserUpdateOne {
	if i != nil {
		uuo.SetParentID(*i)
	}
	return uuo
}

// AddParentID adds i to the "parent_id" field.
func (uuo *UserUpdateOne) AddParentID(i int) *UserUpdateOne {
	uuo.mutation.AddParentID(i)
	return uuo
}

// ClearParentID clears the value of the "parent_id" field.
func (uuo *UserUpdateOne) ClearParentID() *UserUpdateOne {
	uuo.mutation.ClearParentID()
	return uuo
}

// SetPhotoURL sets the "photo_url" field.
func (uuo *UserUpdateOne) SetPhotoURL(s string) *UserUpdateOne {
	uuo.mutation.SetPhotoURL(s)
	return uuo
}

// SetNillablePhotoURL sets the "photo_url" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillablePhotoURL(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetPhotoURL(*s)
	}
	return uuo
}

// ClearPhotoURL clears the value of the "photo_url" field.
func (uuo *UserUpdateOne) ClearPhotoURL() *UserUpdateOne {
	uuo.mutation.ClearPhotoURL()
	return uuo
}

// SetCreatedAt sets the "created_at" field.
func (uuo *UserUpdateOne) SetCreatedAt(t time.Time) *UserUpdateOne {
	uuo.mutation.SetCreatedAt(t)
	return uuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableCreatedAt(t *time.Time) *UserUpdateOne {
	if t != nil {
		uuo.SetCreatedAt(*t)
	}
	return uuo
}

// SetUpdatedAt sets the "updated_at" field.
func (uuo *UserUpdateOne) SetUpdatedAt(t time.Time) *UserUpdateOne {
	uuo.mutation.SetUpdatedAt(t)
	return uuo
}

// SetCreatedBy sets the "created_by" field.
func (uuo *UserUpdateOne) SetCreatedBy(i int) *UserUpdateOne {
	uuo.mutation.ResetCreatedBy()
	uuo.mutation.SetCreatedBy(i)
	return uuo
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableCreatedBy(i *int) *UserUpdateOne {
	if i != nil {
		uuo.SetCreatedBy(*i)
	}
	return uuo
}

// AddCreatedBy adds i to the "created_by" field.
func (uuo *UserUpdateOne) AddCreatedBy(i int) *UserUpdateOne {
	uuo.mutation.AddCreatedBy(i)
	return uuo
}

// ClearCreatedBy clears the value of the "created_by" field.
func (uuo *UserUpdateOne) ClearCreatedBy() *UserUpdateOne {
	uuo.mutation.ClearCreatedBy()
	return uuo
}

// SetUpdatedBy sets the "updated_by" field.
func (uuo *UserUpdateOne) SetUpdatedBy(i int) *UserUpdateOne {
	uuo.mutation.ResetUpdatedBy()
	uuo.mutation.SetUpdatedBy(i)
	return uuo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableUpdatedBy(i *int) *UserUpdateOne {
	if i != nil {
		uuo.SetUpdatedBy(*i)
	}
	return uuo
}

// AddUpdatedBy adds i to the "updated_by" field.
func (uuo *UserUpdateOne) AddUpdatedBy(i int) *UserUpdateOne {
	uuo.mutation.AddUpdatedBy(i)
	return uuo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (uuo *UserUpdateOne) ClearUpdatedBy() *UserUpdateOne {
	uuo.mutation.ClearUpdatedBy()
	return uuo
}

// AddUpdatedBlogIDs adds the "updated_blogs" edge to the Blogs entity by IDs.
func (uuo *UserUpdateOne) AddUpdatedBlogIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.AddUpdatedBlogIDs(ids...)
	return uuo
}

// AddUpdatedBlogs adds the "updated_blogs" edges to the Blogs entity.
func (uuo *UserUpdateOne) AddUpdatedBlogs(b ...*Blogs) *UserUpdateOne {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return uuo.AddUpdatedBlogIDs(ids...)
}

// SetCreatedByUserID sets the "created_by_user" edge to the User entity by ID.
func (uuo *UserUpdateOne) SetCreatedByUserID(id int) *UserUpdateOne {
	uuo.mutation.SetCreatedByUserID(id)
	return uuo
}

// SetNillableCreatedByUserID sets the "created_by_user" edge to the User entity by ID if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableCreatedByUserID(id *int) *UserUpdateOne {
	if id != nil {
		uuo = uuo.SetCreatedByUserID(*id)
	}
	return uuo
}

// SetCreatedByUser sets the "created_by_user" edge to the User entity.
func (uuo *UserUpdateOne) SetCreatedByUser(u *User) *UserUpdateOne {
	return uuo.SetCreatedByUserID(u.ID)
}

// AddCreatedUserIDs adds the "created_users" edge to the User entity by IDs.
func (uuo *UserUpdateOne) AddCreatedUserIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.AddCreatedUserIDs(ids...)
	return uuo
}

// AddCreatedUsers adds the "created_users" edges to the User entity.
func (uuo *UserUpdateOne) AddCreatedUsers(u ...*User) *UserUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uuo.AddCreatedUserIDs(ids...)
}

// SetUpdatedByUserID sets the "updated_by_user" edge to the User entity by ID.
func (uuo *UserUpdateOne) SetUpdatedByUserID(id int) *UserUpdateOne {
	uuo.mutation.SetUpdatedByUserID(id)
	return uuo
}

// SetNillableUpdatedByUserID sets the "updated_by_user" edge to the User entity by ID if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableUpdatedByUserID(id *int) *UserUpdateOne {
	if id != nil {
		uuo = uuo.SetUpdatedByUserID(*id)
	}
	return uuo
}

// SetUpdatedByUser sets the "updated_by_user" edge to the User entity.
func (uuo *UserUpdateOne) SetUpdatedByUser(u *User) *UserUpdateOne {
	return uuo.SetUpdatedByUserID(u.ID)
}

// AddUpdatedUserIDs adds the "updated_users" edge to the User entity by IDs.
func (uuo *UserUpdateOne) AddUpdatedUserIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.AddUpdatedUserIDs(ids...)
	return uuo
}

// AddUpdatedUsers adds the "updated_users" edges to the User entity.
func (uuo *UserUpdateOne) AddUpdatedUsers(u ...*User) *UserUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uuo.AddUpdatedUserIDs(ids...)
}

// Mutation returns the UserMutation object of the builder.
func (uuo *UserUpdateOne) Mutation() *UserMutation {
	return uuo.mutation
}

// ClearUpdatedBlogs clears all "updated_blogs" edges to the Blogs entity.
func (uuo *UserUpdateOne) ClearUpdatedBlogs() *UserUpdateOne {
	uuo.mutation.ClearUpdatedBlogs()
	return uuo
}

// RemoveUpdatedBlogIDs removes the "updated_blogs" edge to Blogs entities by IDs.
func (uuo *UserUpdateOne) RemoveUpdatedBlogIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.RemoveUpdatedBlogIDs(ids...)
	return uuo
}

// RemoveUpdatedBlogs removes "updated_blogs" edges to Blogs entities.
func (uuo *UserUpdateOne) RemoveUpdatedBlogs(b ...*Blogs) *UserUpdateOne {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return uuo.RemoveUpdatedBlogIDs(ids...)
}

// ClearCreatedByUser clears the "created_by_user" edge to the User entity.
func (uuo *UserUpdateOne) ClearCreatedByUser() *UserUpdateOne {
	uuo.mutation.ClearCreatedByUser()
	return uuo
}

// ClearCreatedUsers clears all "created_users" edges to the User entity.
func (uuo *UserUpdateOne) ClearCreatedUsers() *UserUpdateOne {
	uuo.mutation.ClearCreatedUsers()
	return uuo
}

// RemoveCreatedUserIDs removes the "created_users" edge to User entities by IDs.
func (uuo *UserUpdateOne) RemoveCreatedUserIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.RemoveCreatedUserIDs(ids...)
	return uuo
}

// RemoveCreatedUsers removes "created_users" edges to User entities.
func (uuo *UserUpdateOne) RemoveCreatedUsers(u ...*User) *UserUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uuo.RemoveCreatedUserIDs(ids...)
}

// ClearUpdatedByUser clears the "updated_by_user" edge to the User entity.
func (uuo *UserUpdateOne) ClearUpdatedByUser() *UserUpdateOne {
	uuo.mutation.ClearUpdatedByUser()
	return uuo
}

// ClearUpdatedUsers clears all "updated_users" edges to the User entity.
func (uuo *UserUpdateOne) ClearUpdatedUsers() *UserUpdateOne {
	uuo.mutation.ClearUpdatedUsers()
	return uuo
}

// RemoveUpdatedUserIDs removes the "updated_users" edge to User entities by IDs.
func (uuo *UserUpdateOne) RemoveUpdatedUserIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.RemoveUpdatedUserIDs(ids...)
	return uuo
}

// RemoveUpdatedUsers removes "updated_users" edges to User entities.
func (uuo *UserUpdateOne) RemoveUpdatedUsers(u ...*User) *UserUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uuo.RemoveUpdatedUserIDs(ids...)
}

// Where appends a list predicates to the UserUpdate builder.
func (uuo *UserUpdateOne) Where(ps ...predicate.User) *UserUpdateOne {
	uuo.mutation.Where(ps...)
	return uuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (uuo *UserUpdateOne) Select(field string, fields ...string) *UserUpdateOne {
	uuo.fields = append([]string{field}, fields...)
	return uuo
}

// Save executes the query and returns the updated User entity.
func (uuo *UserUpdateOne) Save(ctx context.Context) (*User, error) {
	uuo.defaults()
	return withHooks(ctx, uuo.sqlSave, uuo.mutation, uuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uuo *UserUpdateOne) SaveX(ctx context.Context) *User {
	node, err := uuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (uuo *UserUpdateOne) Exec(ctx context.Context) error {
	_, err := uuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uuo *UserUpdateOne) ExecX(ctx context.Context) {
	if err := uuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uuo *UserUpdateOne) defaults() {
	if _, ok := uuo.mutation.UpdatedAt(); !ok {
		v := user.UpdateDefaultUpdatedAt()
		uuo.mutation.SetUpdatedAt(v)
	}
}

func (uuo *UserUpdateOne) sqlSave(ctx context.Context) (_node *User, err error) {
	_spec := sqlgraph.NewUpdateSpec(user.Table, user.Columns, sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt))
	id, ok := uuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "User.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := uuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, user.FieldID)
		for _, f := range fields {
			if !user.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != user.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := uuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uuo.mutation.Username(); ok {
		_spec.SetField(user.FieldUsername, field.TypeString, value)
	}
	if value, ok := uuo.mutation.Password(); ok {
		_spec.SetField(user.FieldPassword, field.TypeString, value)
	}
	if value, ok := uuo.mutation.Email(); ok {
		_spec.SetField(user.FieldEmail, field.TypeString, value)
	}
	if value, ok := uuo.mutation.FirstName(); ok {
		_spec.SetField(user.FieldFirstName, field.TypeString, value)
	}
	if value, ok := uuo.mutation.LastName(); ok {
		_spec.SetField(user.FieldLastName, field.TypeString, value)
	}
	if value, ok := uuo.mutation.DateOfBirth(); ok {
		_spec.SetField(user.FieldDateOfBirth, field.TypeTime, value)
	}
	if uuo.mutation.DateOfBirthCleared() {
		_spec.ClearField(user.FieldDateOfBirth, field.TypeTime)
	}
	if value, ok := uuo.mutation.Gender(); ok {
		_spec.SetField(user.FieldGender, field.TypeString, value)
	}
	if uuo.mutation.GenderCleared() {
		_spec.ClearField(user.FieldGender, field.TypeString)
	}
	if value, ok := uuo.mutation.PhoneNumber(); ok {
		_spec.SetField(user.FieldPhoneNumber, field.TypeString, value)
	}
	if uuo.mutation.PhoneNumberCleared() {
		_spec.ClearField(user.FieldPhoneNumber, field.TypeString)
	}
	if value, ok := uuo.mutation.CurrentAddress(); ok {
		_spec.SetField(user.FieldCurrentAddress, field.TypeString, value)
	}
	if uuo.mutation.CurrentAddressCleared() {
		_spec.ClearField(user.FieldCurrentAddress, field.TypeString)
	}
	if value, ok := uuo.mutation.PermanentAddress(); ok {
		_spec.SetField(user.FieldPermanentAddress, field.TypeString, value)
	}
	if uuo.mutation.PermanentAddressCleared() {
		_spec.ClearField(user.FieldPermanentAddress, field.TypeString)
	}
	if value, ok := uuo.mutation.IsActive(); ok {
		_spec.SetField(user.FieldIsActive, field.TypeBool, value)
	}
	if value, ok := uuo.mutation.IsDeleted(); ok {
		_spec.SetField(user.FieldIsDeleted, field.TypeBool, value)
	}
	if value, ok := uuo.mutation.IsEmailVerified(); ok {
		_spec.SetField(user.FieldIsEmailVerified, field.TypeBool, value)
	}
	if value, ok := uuo.mutation.IsVerified(); ok {
		_spec.SetField(user.FieldIsVerified, field.TypeBool, value)
	}
	if value, ok := uuo.mutation.LastLoginTime(); ok {
		_spec.SetField(user.FieldLastLoginTime, field.TypeTime, value)
	}
	if uuo.mutation.LastLoginTimeCleared() {
		_spec.ClearField(user.FieldLastLoginTime, field.TypeTime)
	}
	if value, ok := uuo.mutation.ParentID(); ok {
		_spec.SetField(user.FieldParentID, field.TypeInt, value)
	}
	if value, ok := uuo.mutation.AddedParentID(); ok {
		_spec.AddField(user.FieldParentID, field.TypeInt, value)
	}
	if uuo.mutation.ParentIDCleared() {
		_spec.ClearField(user.FieldParentID, field.TypeInt)
	}
	if value, ok := uuo.mutation.PhotoURL(); ok {
		_spec.SetField(user.FieldPhotoURL, field.TypeString, value)
	}
	if uuo.mutation.PhotoURLCleared() {
		_spec.ClearField(user.FieldPhotoURL, field.TypeString)
	}
	if value, ok := uuo.mutation.CreatedAt(); ok {
		_spec.SetField(user.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := uuo.mutation.UpdatedAt(); ok {
		_spec.SetField(user.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := uuo.mutation.CreatedBy(); ok {
		_spec.SetField(user.FieldCreatedBy, field.TypeInt, value)
	}
	if value, ok := uuo.mutation.AddedCreatedBy(); ok {
		_spec.AddField(user.FieldCreatedBy, field.TypeInt, value)
	}
	if uuo.mutation.CreatedByCleared() {
		_spec.ClearField(user.FieldCreatedBy, field.TypeInt)
	}
	if value, ok := uuo.mutation.UpdatedBy(); ok {
		_spec.SetField(user.FieldUpdatedBy, field.TypeInt, value)
	}
	if value, ok := uuo.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(user.FieldUpdatedBy, field.TypeInt, value)
	}
	if uuo.mutation.UpdatedByCleared() {
		_spec.ClearField(user.FieldUpdatedBy, field.TypeInt)
	}
	if uuo.mutation.UpdatedBlogsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UpdatedBlogsTable,
			Columns: []string{user.UpdatedBlogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blogs.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedUpdatedBlogsIDs(); len(nodes) > 0 && !uuo.mutation.UpdatedBlogsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UpdatedBlogsTable,
			Columns: []string{user.UpdatedBlogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blogs.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.UpdatedBlogsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UpdatedBlogsTable,
			Columns: []string{user.UpdatedBlogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blogs.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.CreatedByUserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   user.CreatedByUserTable,
			Columns: []string{user.CreatedByUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.CreatedByUserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   user.CreatedByUserTable,
			Columns: []string{user.CreatedByUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.CreatedUsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CreatedUsersTable,
			Columns: []string{user.CreatedUsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedCreatedUsersIDs(); len(nodes) > 0 && !uuo.mutation.CreatedUsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CreatedUsersTable,
			Columns: []string{user.CreatedUsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.CreatedUsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CreatedUsersTable,
			Columns: []string{user.CreatedUsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.UpdatedByUserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   user.UpdatedByUserTable,
			Columns: []string{user.UpdatedByUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.UpdatedByUserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   user.UpdatedByUserTable,
			Columns: []string{user.UpdatedByUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.UpdatedUsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UpdatedUsersTable,
			Columns: []string{user.UpdatedUsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedUpdatedUsersIDs(); len(nodes) > 0 && !uuo.mutation.UpdatedUsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UpdatedUsersTable,
			Columns: []string{user.UpdatedUsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.UpdatedUsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UpdatedUsersTable,
			Columns: []string{user.UpdatedUsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &User{config: uuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, uuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	uuo.mutation.done = true
	return _node, nil
}
